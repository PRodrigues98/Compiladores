%{

#include <stdio.h>
#include <assert.h>
#include <stdlib.h>
#include <string.h>
#include "node.h"
#include "tabid.h"
#include "postfix.h"
#include "y.tab.h"

extern void yyerror(const char*);
extern char **yynames;
extern int trace;
extern FILE *outfp;

int lbl;

static long brklbl[20], brkcnt; /* break labels */
/* label _L0 is a break without a while/switch) */

char *extrns[100]; /* emit externs at the end only */
int extcnt;

char *mklbl(int n) {
 	static char buf[20];
	sprintf(buf, "_i%d", n);
	return strcpy(malloc(strlen(buf)+1),buf);
}

static void outstr(char *s) {

	while(*s){
		fprintf(outfp, pfCHAR, (unsigned char)*s++);
	}

	fprintf(outfp, pfCHAR, 0);
}

char *mkfunc(char *s) {
	char *buf = malloc(80);
	
	strcpy(buf, "_");
	strcat(buf, s);
 	
 	return buf;
}

%}

%term LIST=';' BLOCK='{' ARGS=','
%include "y.tab.h"

%%

bloco: BLOCK(list)			1 {}

list: LIST(list, base) 		1 {}
list: base		 			1 {}

base: expr					1 {}

expr: CALL(ID, args)		3 { fprintf(outfp, pfCALL pfTRASH pfPUSH, mkfunc(LEFT_CHILD(p)->value.s), RIGHT_CHILD(p)->info); }
expr: ATR(INT, LOCAL)		2 { fprintf(outfp, pfIMM pfLOCAL pfSTORE, LEFT_CHILD(p)->value.i, RIGHT_CHILD(p)->value.i); }
expr: ATR(INT, ID)			2 { fprintf(outfp, pfIMM pfADDR pfSTORE, LEFT_CHILD(p)->value.i, RIGHT_CHILD(p)->value.s); }
expr: STR 					1 { lbl++; fprintf(outfp, pfRODATA pfALIGN pfLABEL, mklbl(lbl)); outstr(p->value.s); fprintf(outfp, pfTEXT pfADDR, mklbl(lbl)); }

args: ARGS(NIL, expr)		1 {}

%%

void enterFunction(int pub, char *name, int enter, Node *stmt) {
 	int i;

 	extern int errors, trace;
 	extern char **yynames;

 	if(errors){
 		return;
 	} 

	if(trace){
		printNode(stmt, 0, yynames);
	} 
	
	fflush(stdout);

	char *funcName = mkfunc(name);

	if(pub){
		fprintf(outfp, pfTEXT pfALIGN pfGLOBL pfLABEL pfENTER, funcName, pfFUNC, funcName, enter * (pfWORD/4));
	}
	else{
		fprintf(outfp, pfTEXT pfALIGN pfLABEL pfENTER, funcName, enter * (pfWORD/4));
	}

	yyselect(stmt);

	fprintf(outfp, pfPOP /*Pop shouldnt be here*/ pfLEAVE pfRET);

	freeNode(stmt);

	for (i = 0; i < extcnt; i++){
		if (extrns[i] && strcmp(extrns[i], funcName) == 0){
			extrns[i] = 0;
		}
	}
}

void externs(){
	int i;
  
	for (i = 0; i < extcnt; i++){
  		if (extrns[i]){
    		fprintf(outfp, pfEXTRN, extrns[i]);
  		}
	}
}

void variable(int pub, char *name, Node *vc, Node *init){
	int i = 0, siz = 1;

	if(vc->info % 10 >= 5){
		fprintf(outfp, pfRODATA);
	}
	else{
		fprintf(outfp, pfDATA);
	}

	if(pub){
		fprintf(outfp, pfGLOBL pfALIGN pfLABEL, name, pfOBJ, name);
	}
	else{
		fprintf(outfp, pfALIGN pfLABEL, name);
	}
/*
	if(vc->info == ){
		siz = vc->value.i;
	}
*/
	if(init){
		switch (init->info){
			case 1:
				fprintf(outfp, pfINTEGER, init->CHILD(i)->value.i);
				break;

			case 2: 
				fprintf(outfp, pfID, init->CHILD(i)->value.s);
				break;

			case 3:
				{char *l = mklbl(++lbl);

				fprintf(outfp, pfRODATA pfALIGN pfLABEL, l);
				outstr(init->CHILD(i)->value.s);
				fprintf(outfp, pfDATA pfID, l); 

				break;}
		}
	}

	for (i = 0; i < extcnt; i++){
		if (extrns[i] && strcmp(extrns[i], name) == 0){
			extrns[i] = 0;
		}
	}
}
